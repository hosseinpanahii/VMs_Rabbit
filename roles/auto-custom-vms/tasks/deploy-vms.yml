---
- name: Create working directory on Ansible Controller
  ansible.builtin.file:
    path: "{{ Global.Workingdir }}"
    state: directory
    mode: "755"
      
- name: Check if Ubuntu ISO exists locally on Ansible Controller
  ansible.builtin.stat:
    path: "{{ Global.Workingdir }}/{{ Global.UbuntuISO_ORG }}"
  register: installerfilecheck
          
- name: Download Ubuntu ISO if ISO file doesn't exist locally
  ansible.builtin.get_url:
    url: "{{ Global.UbuntuISO_URL }}{{ Global.UbuntuISO_ORG }}"
    dest: "{{ Global.Workingdir }}/{{ Global.UbuntuISO_ORG }}"
    mode: "755"
  when:
    - not installerfilecheck.stat.exists
 
- name: Extract Ubuntu ISO
  ansible.builtin.command: "7z -y x {{ Global.Workingdir }}/{{ Global.UbuntuISO_ORG }} \
                           -o{{ Global.Workingdir }}/ISO"
  changed_when: false
          
- name: Move [BOOT] out of ISO extraction directory
  ansible.builtin.command: "mv {{ Global.Workingdir }}/ISO/'[BOOT]' {{ Global.Workingdir }}/BOOT"
  changed_when: false
          
- name: Create directory to store user-data and meta-data
  ansible.builtin.file:
    path: "{{ Global.Workingdir }}/ISO/server"
    #    path: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}/autoinstall"
    state: directory
    #  loop: "{{ VMsToDeploy }}"
    #  when: item.Deploy
         
- name: Copy user-data file(s) to directory
  ansible.builtin.template:
    src: Ubuntu_user-data.j2
    #    dest: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}/autoinstall/user-data"
    dest: "{{ Global.Workingdir }}/ISO/server/user-data"
    mode: "666"
    #  loop: "{{ VMsToDeploy }}"
    #  when: item.Deploy
         
- name: Copy grub.cfg file into ISO extraction directory
  ansible.builtin.copy:
    src: ./Ubuntu_grub.cfg
    dest: "{{ Global.Workingdir }}/ISO/boot/grub/grub.cfg"
    mode: "666"
          
    
- name: Create empty meta-data file(s)
  ansible.builtin.file:
          #path: "{{ Global.Workingdir }}/ISOcopy/{{ item.Name }}/autoinstall/meta-data"
    path: "{{ Global.Workingdir }}/ISO/server/meta-data"
    state: touch
    mode: "666"
    #  loop: "{{ VMsToDeploy }}"
    #  when: item.Deploy
          
- name: Create custom Ubuntu ISO(s)
  ansible.builtin.command: "xorriso -as mkisofs -r -V 'Ubuntu-Server 22.04.5 LTS amd64' -o {{ Global.Workingdir }}/{{ Global.UbuntuISO }} --grub2-mbr {{ Global.Workingdir }}/BOOT/1-Boot-NoEmul.img -partition_offset 16 --mbr-force-bootable -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b {{ Global.Workingdir }}/BOOT/2-Boot-NoEmul.img -appended_part_as_gpt -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 -c '/boot.catalog' -b '/boot/grub/i386-pc/eltorito.img' -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info -eltorito-alt-boot -e '--interval:appended_partition_2:::' -no-emul-boot {{ Global.Workingdir }}/ISO/"

  
- name: Upload the custom Ubuntu ISO(s) to the vSphere datastore
  community.vmware.vsphere_copy:
    hostname: "{{ ESXI.IP }}"
    username: "{{ ESXI.User }}"
    password: "{{ ESXI.Password }}"
    validate_certs: false
    #        datacenter: "{{ Global.ISODatacenter }}"
    src: "{{ Global.Workingdir }}/{{ Global.UbuntuISO }}"
    datastore: "{{ Global.ISODatastore }}"
    path: "{{ Global.ISODatastoreDir }}/{{ Global.UbuntuISO }}"
    #      loop: "{{ VMsToDeploy }}"
    #      when: item.Deploy

- name: Deploy Ubuntu VM(s)
  community.vmware.vmware_guest:
    hostname: "{{ ESXI.IP }}"       #use vcenter ip if you want to use vcenter infra
    username: "{{ ESXI.User }}"
    password: "{{ ESXI.Password }}"
    validate_certs: false
    name: "{{ item.Name }}"
    state: "{{ item.Configuration.VM.PowerState }}"
    guest_id: "{{ item.Configuration.VM.GuestID }}"
    #        datacenter: "{{ item.Placement.Datacenter }}"
    #        cluster: "{{ item.Placement.Cluster }}"
    folder: "{{ item.Placement.Folder }}"
    disk:
      - size_gb: "{{ item.Configuration.Storage.DiskSize }}"
        type: "{{ item.Configuration.Storage.DiskType }}"
        datastore: "{{ item.Placement.Datastore }}"
    hardware:
      memory_mb: "{{ item.Configuration.Compute.MemorySize }}"
      num_cpus: "{{ item.Configuration.Compute.CPUs }}"
      num_cpu_cores_per_socket: "{{ item.Configuration.Compute.Cores }}"
      scsi: "{{ item.Configuration.Storage.SCSIController }}"
    networks:
      - name: "{{ item.Configuration.Network.Portgroup }}"
        device_type: "{{ item.Configuration.Network.NetworkAdapter }}"
    cdrom:
      - controller_number: 0
        unit_number: 0
        type: iso
        iso_path: "[{{ Global.ISODatastore }}] {{ Global.ISODatastoreDir }}/{{ Global.UbuntuISO }}"
        state: present
    annotation: |
                *** Auto-Deployed by Ansible ***
                Username: {{ item.Configuration.OS.User }}
                Password: {{ item.Configuration.OS.Password }}
  loop: "{{ VMsToDeploy }}"
  when: item.Deploy
      
- name: Start checking if the Ubuntu VM(s) is/are ready
  community.vmware.vmware_guest_info:
    hostname: "{{ ESXI.IP }}"
    username: "{{ ESXI.User }}"
    password: "{{ ESXI.Password }}"
    datacenter: "ha-datacenter"     #if use ESXI because there wasent any datacenter "ha-datacenter" is default value
    validate_certs: false
    name: "{{ item.Name }}"
    schema: vsphere
  register: vm_facts
  until: vm_facts.instance.guest.hostName == "{{Global.Hostname_tmp}}"
  retries: 30
  delay: 60
  loop: "{{ VMsToDeploy }}"
  when: item.Deploy
  #
- name: Set password for the Ubuntu user
  community.vmware.vmware_vm_shell:
    hostname: "{{ ESXI.IP }}"
    username: "{{ ESXI.User }}"          
    password: "{{ ESXI.Password }}"
    validate_certs: false
    vm_id: "{{ item.Name }}"
    vm_username: "{{ item.Configuration.OS.User }}"
    vm_password: ubuntu
    vm_shell: /usr/bin/echo
    #vm_shell_args: "'{{ item.Configuration.OS.User }}:{{ item.Configuration.OS.Password }}' | sudo chpasswd"
    vm_shell_args: "-e '{{ item.Configuration.OS.Password }}\nubuntu\nubuntu' | passwd {{ item.Configuration.OS.User }} > /tmp/$$.txt 2>&1"
  loop: "{{ VMsToDeploy }}"
  when: item.Deploy
        
  
- name: Copy network configuration file(s) to working directory
  ansible.builtin.template:
     src: ./roles/auto-custom-vms/templates/Ubuntu_Netplan.j2
     dest: "{{ Global.Workingdir }}/{{ item.Name }}-00-installer-config.yaml"
     mode: "755"
  loop: "{{ VMsToDeploy }}"
  when: item.Deploy

  #
- name: Copy network configuration file(s) to Ubuntu VM(s)
  community.vmware.vmware_guest_file_operation:
    hostname: "{{ ESXI.IP }}"
    username: "{{ ESXI.User }}"
    password: "{{ ESXI.Password }}"
    validate_certs: false
    vm_id: "{{ item.Name }}"
    vm_username: "{{ item.Configuration.OS.User }}"
    vm_password: "{{ item.Configuration.OS.Password }}"
    copy:
      src: "{{ Global.Workingdir }}/{{ item.Name }}-00-installer-config.yaml"
      dest: "/home/{{ item.Configuration.OS.User }}/{{ item.Name }}-00-installer-config.yaml"
  loop: "{{ VMsToDeploy }}"
  when: item.Deploy
  
 
- name: Move network configuration file to correct location on Ubuntu VM(s)
  community.vmware.vmware_vm_shell:
    hostname: "{{ ESXI.IP }}"
    username: "{{ ESXI.User }}"
    password: "{{ ESXI.Password }}"
    validate_certs: false
    vm_id: "{{ item.Name }}"
    vm_username: "{{ item.Configuration.OS.User }}"
    vm_password: "{{ item.Configuration.OS.Password }}"
    vm_shell: /usr/bin/echo
    vm_shell_args: " {{ item.Configuration.OS.Password }} | sudo -S mv /home/ubuntu/swarm-node1-00-installer-config.yaml /etc/netplan/00-installer-config.yaml > /tmp/result-mv-net-config.txt 2>&1"
  loop: "{{ VMsToDeploy }}"
  when: item.Deploy
  
- name: Appply the network configuration on Ubuntu VM(s)
  community.vmware.vmware_vm_shell:
    hostname: "{{ ESXI.IP }}"
    username: "{{ ESXI.User }}"
    password: "{{ ESXI.Password }}"
    validate_certs: false
    vm_id: "{{ item.Name }}"
    vm_username: "{{ item.Configuration.OS.User }}"
    vm_password: "{{ item.Configuration.OS.Password }}"
    vm_shell: /usr/bin/echo
    vm_shell_args: "{{ item.Configuration.OS.Password }} | sudo -S netplan apply > /tmp/result-apply-netplan 2>&1"
  loop: "{{ VMsToDeploy }}"
  when: item.Deploy
      #
      #
      #    - name: Delete custom Ubuntu ISO(s) from the Datastore
      #      community.vmware.vsphere_file:
      #        host: "{{ vCenter.FQDN }}"
      #        username: "{{ vCenter.User }}"
      #        password: "{{ vCenter.Password }}"
      #        validate_certs: false
      #        datacenter: "{{ Global.ISODatacenter }}"
      #        datastore: "{{ Global.ISODatastore }}"
      #        path: "{{ Global.ISODatastoreDir }}/{{ item.Name }}.iso"
      #        state: absent
      #      loop: "{{ VMsToDeploy }}"
      #      when: item.Deploy
      #
      #
      #    - name: Delete working directory on Ansible Controller
      #      ansible.builtin.file:
      #        path: "{{ Global.Workingdir }}"
      #        state: absent
